// Copyright 2021 Tencent Inc. All rights reserved.
//
// 银行营销对外API
//
// # 前言  银行营销API是专为银行商户设置的一套API。目前仅包含“创建快捷交易协议号上传任务”接口，供银行上传快捷交易协议号文件。微信侧收到文件中，将快捷交易协议号转换为微信用户id，存储到指定的号码包文件中。
//
// API version: 0.1.0

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package marketingbankpackages

import (
	"encoding/json"
	"fmt"
)

// CreateTaskRequest
type CreateTaskRequest struct {
	// 将快捷交易协议号文件进行二进制转换，得到的二进制内容，在请求body中上传此二进制内容。只支持TXT或CSV格式的纯文本文件，每行一个加密后的协议号，换行符使用\\n，编码格式使用utf-8。使用微信支付平台证书中的公钥逐个加密协议号，并将证书序列号包含在请求HTTP头部的Wechatpay-Serial。文件大小不能超过2MB，建议单个文件的行数不超过5500行。同一个号码包的多个上传任务的文件名不可重复。
	File *FormFile `json:"file"`
	// 快捷协议号包的文件元信息
	Meta *FileMeta `json:"meta"`
}

func (o CreateTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.File == nil {
		return nil, fmt.Errorf("field `File` is required and must be specified in CreateTaskRequest")
	}
	toSerialize["file"] = o.File

	if o.Meta == nil {
		return nil, fmt.Errorf("field `Meta` is required and must be specified in CreateTaskRequest")
	}
	toSerialize["meta"] = o.Meta
	return json.Marshal(toSerialize)
}

func (o CreateTaskRequest) String() string {
	var ret string
	ret += fmt.Sprintf("File:%v, ", o.File)

	ret += fmt.Sprintf("Meta:%v", o.Meta)

	return fmt.Sprintf("CreateTaskRequest{%s}", ret)
}

func (o CreateTaskRequest) Clone() *CreateTaskRequest {
	ret := CreateTaskRequest{}

	if o.File != nil {
		ret.File = o.File.Clone()
	}

	if o.Meta != nil {
		ret.Meta = o.Meta.Clone()
	}

	return &ret
}

// FileMeta
type FileMeta struct {
	// 快捷协议号包文件名。可包含英文字母，数字，_，.，-等内容，不允许出现其他不合法符号。同一个号码包的多个上传任务的文件名不可重复，要保证唯一
	Filename *string `json:"filename,omitempty"`
	// 快捷交易协议号文件的文件摘要，即快捷交易协议号文件的二进制内容进行sha256计算得到的值
	Sha256 *string `json:"sha256"`
	// 银行类型，用于标识协议号所属的银行以及卡类型(信用卡或借记卡)。采用字符串类型的银行标识，值列表详见[银行类型](https://pay.weixin.qq.com/wiki/doc/apiv3_partner/terms_definition/chapter1_1_3.shtml#part-7)
	BankType *string `json:"bank_type"`
}

func (o FileMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}

	if o.Sha256 == nil {
		return nil, fmt.Errorf("field `Sha256` is required and must be specified in FileMeta")
	}
	toSerialize["sha256"] = o.Sha256

	if o.BankType == nil {
		return nil, fmt.Errorf("field `BankType` is required and must be specified in FileMeta")
	}
	toSerialize["bank_type"] = o.BankType
	return json.Marshal(toSerialize)
}

func (o FileMeta) String() string {
	var ret string
	if o.Filename == nil {
		ret += "Filename:<nil>, "
	} else {
		ret += fmt.Sprintf("Filename:%v, ", *o.Filename)
	}

	if o.Sha256 == nil {
		ret += "Sha256:<nil>, "
	} else {
		ret += fmt.Sprintf("Sha256:%v, ", *o.Sha256)
	}

	if o.BankType == nil {
		ret += "BankType:<nil>"
	} else {
		ret += fmt.Sprintf("BankType:%v", *o.BankType)
	}

	return fmt.Sprintf("FileMeta{%s}", ret)
}

func (o FileMeta) Clone() *FileMeta {
	ret := FileMeta{}

	if o.Filename != nil {
		ret.Filename = new(string)
		*ret.Filename = *o.Filename
	}

	if o.Sha256 != nil {
		ret.Sha256 = new(string)
		*ret.Sha256 = *o.Sha256
	}

	if o.BankType != nil {
		ret.BankType = new(string)
		*ret.BankType = *o.BankType
	}

	return &ret
}

// FormFile
type FormFile struct {
	// 由表单上传的文件部分的文件名
	Filename *string `json:"filename,omitempty"`
	// 表示上传文件的 Content-Type
	ContentType *string `json:"content_type,omitempty"`
	// 一个二进制串表示上传文件的整体内容
	Content *string `json:"content,omitempty"`
}

func (o FormFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}

	if o.ContentType != nil {
		toSerialize["content_type"] = o.ContentType
	}

	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

func (o FormFile) String() string {
	var ret string
	if o.Filename == nil {
		ret += "Filename:<nil>, "
	} else {
		ret += fmt.Sprintf("Filename:%v, ", *o.Filename)
	}

	if o.ContentType == nil {
		ret += "ContentType:<nil>, "
	} else {
		ret += fmt.Sprintf("ContentType:%v, ", *o.ContentType)
	}

	if o.Content == nil {
		ret += "Content:<nil>"
	} else {
		ret += fmt.Sprintf("Content:%v", *o.Content)
	}

	return fmt.Sprintf("FormFile{%s}", ret)
}

func (o FormFile) Clone() *FormFile {
	ret := FormFile{}

	if o.Filename != nil {
		ret.Filename = new(string)
		*ret.Filename = *o.Filename
	}

	if o.ContentType != nil {
		ret.ContentType = new(string)
		*ret.ContentType = *o.ContentType
	}

	if o.Content != nil {
		ret.Content = new(string)
		*ret.Content = *o.Content
	}

	return &ret
}

// ListTaskRequest
type ListTaskRequest struct {
	// 号码包唯一标识符。可在微信支付商户平台创建号码包后获得。
	PackageId *string `json:"package_id"`
	// 任务上传的文件名
	Filename *string `json:"filename,omitempty"`
	// 分页页码，页码从0开始
	Offset *int64 `json:"offset,omitempty"`
	// 分页大小，单次最多查询20条记录
	Limit *int64 `json:"limit,omitempty"`
	// 上传任务的状态：PROCESSING - 处理中，FINISHED - 已完成
	Status *TaskStatus `json:"status,omitempty"`
}

func (o ListTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.PackageId == nil {
		return nil, fmt.Errorf("field `PackageId` is required and must be specified in ListTaskRequest")
	}
	toSerialize["package_id"] = o.PackageId

	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}

	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}

	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}

	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

func (o ListTaskRequest) String() string {
	var ret string
	if o.PackageId == nil {
		ret += "PackageId:<nil>, "
	} else {
		ret += fmt.Sprintf("PackageId:%v, ", *o.PackageId)
	}

	if o.Filename == nil {
		ret += "Filename:<nil>, "
	} else {
		ret += fmt.Sprintf("Filename:%v, ", *o.Filename)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>, "
	} else {
		ret += fmt.Sprintf("Limit:%v, ", *o.Limit)
	}

	if o.Status == nil {
		ret += "Status:<nil>"
	} else {
		ret += fmt.Sprintf("Status:%v", *o.Status)
	}

	return fmt.Sprintf("ListTaskRequest{%s}", ret)
}

func (o ListTaskRequest) Clone() *ListTaskRequest {
	ret := ListTaskRequest{}

	if o.PackageId != nil {
		ret.PackageId = new(string)
		*ret.PackageId = *o.PackageId
	}

	if o.Filename != nil {
		ret.Filename = new(string)
		*ret.Filename = *o.Filename
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	if o.Status != nil {
		ret.Status = new(TaskStatus)
		*ret.Status = *o.Status
	}

	return &ret
}

// ListTaskResponse
type ListTaskResponse struct {
	// 符合条件的上传任务列表
	Data []Task `json:"data,omitempty"`
	// 总数量
	TotalCount *int64 `json:"total_count"`
	// 分页页码，页码从0开始
	Offset *int64 `json:"offset"`
	// 分页大小
	Limit *int64 `json:"limit"`
}

func (o ListTaskResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Data != nil {
		toSerialize["data"] = o.Data
	}

	if o.TotalCount == nil {
		return nil, fmt.Errorf("field `TotalCount` is required and must be specified in ListTaskResponse")
	}
	toSerialize["total_count"] = o.TotalCount

	if o.Offset == nil {
		return nil, fmt.Errorf("field `Offset` is required and must be specified in ListTaskResponse")
	}
	toSerialize["offset"] = o.Offset

	if o.Limit == nil {
		return nil, fmt.Errorf("field `Limit` is required and must be specified in ListTaskResponse")
	}
	toSerialize["limit"] = o.Limit
	return json.Marshal(toSerialize)
}

func (o ListTaskResponse) String() string {
	var ret string
	ret += fmt.Sprintf("Data:%v, ", o.Data)

	if o.TotalCount == nil {
		ret += "TotalCount:<nil>, "
	} else {
		ret += fmt.Sprintf("TotalCount:%v, ", *o.TotalCount)
	}

	if o.Offset == nil {
		ret += "Offset:<nil>, "
	} else {
		ret += fmt.Sprintf("Offset:%v, ", *o.Offset)
	}

	if o.Limit == nil {
		ret += "Limit:<nil>"
	} else {
		ret += fmt.Sprintf("Limit:%v", *o.Limit)
	}

	return fmt.Sprintf("ListTaskResponse{%s}", ret)
}

func (o ListTaskResponse) Clone() *ListTaskResponse {
	ret := ListTaskResponse{}

	if o.Data != nil {
		ret.Data = make([]Task, len(o.Data))
		for i, item := range o.Data {
			ret.Data[i] = *item.Clone()
		}
	}

	if o.TotalCount != nil {
		ret.TotalCount = new(int64)
		*ret.TotalCount = *o.TotalCount
	}

	if o.Offset != nil {
		ret.Offset = new(int64)
		*ret.Offset = *o.Offset
	}

	if o.Limit != nil {
		ret.Limit = new(int64)
		*ret.Limit = *o.Limit
	}

	return &ret
}

// Task
type Task struct {
	// 上传任务的主键，唯一定义此资源的标识
	TaskId *string `json:"task_id"`
	// 号码包唯一标识符。可在微信支付商户平台创建号码包后获得。
	PackageId *string `json:"package_id"`
	// 任务上传的文件名
	Filename *string `json:"filename"`
	// 时间格式采用遵循rfc3339标准格式，格式为YYYY-MM-DDTHH:mm:ss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss表示时分秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35.+08:00表示，北京时间2015年5月20日 13点29分35秒。
	CreateTime *string `json:"create_time"`
	// 时间格式采用遵循rfc3339标准格式，格式为YYYY-MM-DDTHH:mm:ss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss表示时分秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35.+08:00表示，北京时间2015年5月20日 13点29分35秒。
	UpdateTime *string `json:"update_time,omitempty"`
	// 上传任务的状态：PROCESSING - 处理中，FINISHED - 已完成
	Status *TaskStatus `json:"status,omitempty"`
	// 匹配成功的协议号数。仅当任务状态是FINISHED时，该数据才有效
	SuccessCount *int64 `json:"success_count,omitempty"`
	// 匹配失败的协议号数。仅当任务状态是FINISHED时，该数据才有效
	FailCount *int64 `json:"fail_count,omitempty"`
	// 匹配成功的微信用户数，不小于匹配成功的协议号数。当一张银行卡被用户绑定到不同微信号时，才可能出现一个协议号对应多个微信账户的情况。仅当任务状态是FINISHED时，该数据才有效
	SuccessUserCount *int64 `json:"success_user_count,omitempty"`
	// 银行类型，用于标识协议号所属的银行以及卡类型(信用卡或借记卡)。采用字符串类型的银行标识，值列表详见[银行类型](https://pay.weixin.qq.com/wiki/doc/apiv3_partner/terms_definition/chapter1_1_3.shtml#part-7)
	BankType *string `json:"bank_type,omitempty"`
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.TaskId == nil {
		return nil, fmt.Errorf("field `TaskId` is required and must be specified in Task")
	}
	toSerialize["task_id"] = o.TaskId

	if o.PackageId == nil {
		return nil, fmt.Errorf("field `PackageId` is required and must be specified in Task")
	}
	toSerialize["package_id"] = o.PackageId

	if o.Filename == nil {
		return nil, fmt.Errorf("field `Filename` is required and must be specified in Task")
	}
	toSerialize["filename"] = o.Filename

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in Task")
	}
	toSerialize["create_time"] = o.CreateTime

	if o.UpdateTime != nil {
		toSerialize["update_time"] = o.UpdateTime
	}

	if o.Status != nil {
		toSerialize["status"] = o.Status
	}

	if o.SuccessCount != nil {
		toSerialize["success_count"] = o.SuccessCount
	}

	if o.FailCount != nil {
		toSerialize["fail_count"] = o.FailCount
	}

	if o.SuccessUserCount != nil {
		toSerialize["success_user_count"] = o.SuccessUserCount
	}

	if o.BankType != nil {
		toSerialize["bank_type"] = o.BankType
	}
	return json.Marshal(toSerialize)
}

func (o Task) String() string {
	var ret string
	if o.TaskId == nil {
		ret += "TaskId:<nil>, "
	} else {
		ret += fmt.Sprintf("TaskId:%v, ", *o.TaskId)
	}

	if o.PackageId == nil {
		ret += "PackageId:<nil>, "
	} else {
		ret += fmt.Sprintf("PackageId:%v, ", *o.PackageId)
	}

	if o.Filename == nil {
		ret += "Filename:<nil>, "
	} else {
		ret += fmt.Sprintf("Filename:%v, ", *o.Filename)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.UpdateTime == nil {
		ret += "UpdateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("UpdateTime:%v, ", *o.UpdateTime)
	}

	if o.Status == nil {
		ret += "Status:<nil>, "
	} else {
		ret += fmt.Sprintf("Status:%v, ", *o.Status)
	}

	if o.SuccessCount == nil {
		ret += "SuccessCount:<nil>, "
	} else {
		ret += fmt.Sprintf("SuccessCount:%v, ", *o.SuccessCount)
	}

	if o.FailCount == nil {
		ret += "FailCount:<nil>, "
	} else {
		ret += fmt.Sprintf("FailCount:%v, ", *o.FailCount)
	}

	if o.SuccessUserCount == nil {
		ret += "SuccessUserCount:<nil>, "
	} else {
		ret += fmt.Sprintf("SuccessUserCount:%v, ", *o.SuccessUserCount)
	}

	if o.BankType == nil {
		ret += "BankType:<nil>"
	} else {
		ret += fmt.Sprintf("BankType:%v", *o.BankType)
	}

	return fmt.Sprintf("Task{%s}", ret)
}

func (o Task) Clone() *Task {
	ret := Task{}

	if o.TaskId != nil {
		ret.TaskId = new(string)
		*ret.TaskId = *o.TaskId
	}

	if o.PackageId != nil {
		ret.PackageId = new(string)
		*ret.PackageId = *o.PackageId
	}

	if o.Filename != nil {
		ret.Filename = new(string)
		*ret.Filename = *o.Filename
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	if o.UpdateTime != nil {
		ret.UpdateTime = new(string)
		*ret.UpdateTime = *o.UpdateTime
	}

	if o.Status != nil {
		ret.Status = new(TaskStatus)
		*ret.Status = *o.Status
	}

	if o.SuccessCount != nil {
		ret.SuccessCount = new(int64)
		*ret.SuccessCount = *o.SuccessCount
	}

	if o.FailCount != nil {
		ret.FailCount = new(int64)
		*ret.FailCount = *o.FailCount
	}

	if o.SuccessUserCount != nil {
		ret.SuccessUserCount = new(int64)
		*ret.SuccessUserCount = *o.SuccessUserCount
	}

	if o.BankType != nil {
		ret.BankType = new(string)
		*ret.BankType = *o.BankType
	}

	return &ret
}

// TaskStatus
type TaskStatus string

func (e TaskStatus) Ptr() *TaskStatus {
	return &e
}

// Enums of TaskStatus
const (
	TASKSTATUS_PROCESSING TaskStatus = "PROCESSING"
	TASKSTATUS_FINISHED   TaskStatus = "FINISHED"
)
