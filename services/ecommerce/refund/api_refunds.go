// Copyright 2021 Tencent Inc. All rights reserved.
//
// 电商退款API
//
// 境内电商退款功能相关API文档
//
// API version: 1.1.8

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package refund

import (
	"context"
	"fmt"
	nethttp "net/http"
	neturl "net/url"
	"strings"

	"github.com/wechatpay-apiv3/wechatpay-go/core"
	"github.com/wechatpay-apiv3/wechatpay-go/core/consts"
	"github.com/wechatpay-apiv3/wechatpay-go/services"
)

type RefundsApiService services.Service

// CreateRefund 申请退款
//
// 当交易发生之后一段时间内，由于买家或者卖家的原因需要退款时，卖家可以通过退款接口将支付款退还给买家，微信支付将在收到退款请求并且验证成功之后，按照退款规则将支付款按原路退到买家账户上。
//
//
// 1. 交易时间超过一年的订单无法提交退款。
// 2. 微信支付退款支持单笔交易分多次退款，多次退款需要提交原支付订单的商户订单号和设置不同的退款单号。申请退款总金额不能超过订单金额。 一笔退款失败后重新提交，请不要更换退款单号，请使用原商户退款单号。
// 3. 请求频率限制：150qps，即每秒钟正常的申请退款请求次数不超过150次，单笔订单请求频率限制：1qpm，即单笔订单每分钟申请退款请求次数不超过1次。
// 4. 每个支付订单的部分退款次数不能超过50次。
// 5. 申请退款接口的返回仅代表业务的受理情况，具体退款是否成功，需要通过退款查询接口获取结果。
// 6. 当二级商户退款账户余额不足时，可发起垫付退款，从电商平台指定账户垫付退款资金。当二级商户退款账户余额充足时，可把退款垫付的资金回补到电商平台账户。垫付退款需要向微信支付申请开通权限，开通权限时需要指定一个垫付出款账户。
func (a *RefundsApiService) CreateRefund(ctx context.Context, req CreateRefundRequest) (resp *Refund4Create, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodPost
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	localVarPath := consts.WechatPayAPIServer + "/v3/ecommerce/refunds/apply"
	// Make sure All Required Params are properly set

	// Setup Body Params
	localVarPostBody = req

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{"application/json"}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract Refund4Create from Http Response
	resp = new(Refund4Create)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// CreateReturnAdvance 垫付退款回补
//
// 提交垫付退款后，发起退款方可通过该接口发起垫付退款资金回补，把退款垫付的资金从二级商户回补到电商平台账户。
//
//
// 1. 垫付回补结果为处理中，微信支付会在90天内定期重试，重试结果需要查单确认。此状态下商户可以重试。
// 2. 若处理中状态重试90天后出款方账户仍然余额不足，回补结果将置为回补失败，系统不再重试，商户也无法重试，后续不能再发起此退款单的回补。回补处理期间请确保出款账户余额足够。
// 3. 垫付退款能力需先开通，才能使用。若需要开通，请联系微信支付客服。
func (a *RefundsApiService) CreateReturnAdvance(ctx context.Context, req CreateReturnAdvanceRequest) (resp *ReturnAdvance, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodPost
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.RefundId == nil {
		return nil, nil, fmt.Errorf("field `RefundId` is required and must be specified in CreateReturnAdvanceRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/ecommerce/refunds/{refund_id}/return-advance"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"refund_id"+"}", neturl.PathEscape(core.ParameterToString(*req.RefundId, "")), -1)

	// Make sure All Required Params are properly set

	// Setup Body Params
	localVarPostBody = &CreateReturnAdvanceBody{
		SubMchid: req.SubMchid,
	}

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{"application/json"}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract ReturnAdvance from Http Response
	resp = new(ReturnAdvance)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// QueryRefund 查询单笔退款（按微信支付退款单号）
//
// 提交退款申请后，通过调用该接口查询退款状态。
//
//
// 1. 退款有一定延时，用零钱支付的退款20分钟内到账，银行卡支付的退款3个工作日后重新查询退款状态。
func (a *RefundsApiService) QueryRefund(ctx context.Context, req QueryRefundRequest) (resp *Refund, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodGet
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.RefundId == nil {
		return nil, nil, fmt.Errorf("field `RefundId` is required and must be specified in QueryRefundRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/ecommerce/refunds/id/{refund_id}"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"refund_id"+"}", neturl.PathEscape(core.ParameterToString(*req.RefundId, "")), -1)

	// Make sure All Required Params are properly set
	if req.SubMchid == nil {
		return nil, nil, fmt.Errorf("field `SubMchid` is required and must be specified in QueryRefundRequest")
	}

	// Setup Query Params
	localVarQueryParams = neturl.Values{}
	localVarQueryParams.Add("sub_mchid", core.ParameterToString(*req.SubMchid, ""))

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract Refund from Http Response
	resp = new(Refund)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// QueryRefundByOutRefundNo 查询单笔退款（按商户退款单号）
//
// 提交退款申请后，通过调用该接口查询退款状态。
//
//
// 1. 退款有一定延时，用零钱支付的退款20分钟内到账，银行卡支付的退款3个工作日后重新查询退款状态。
func (a *RefundsApiService) QueryRefundByOutRefundNo(ctx context.Context, req QueryRefundByOutRefundNoRequest) (resp *Refund, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodGet
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.OutRefundNo == nil {
		return nil, nil, fmt.Errorf("field `OutRefundNo` is required and must be specified in QueryRefundByOutRefundNoRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/ecommerce/refunds/out-refund-no/{out_refund_no}"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"out_refund_no"+"}", neturl.PathEscape(core.ParameterToString(*req.OutRefundNo, "")), -1)

	// Make sure All Required Params are properly set
	if req.SubMchid == nil {
		return nil, nil, fmt.Errorf("field `SubMchid` is required and must be specified in QueryRefundByOutRefundNoRequest")
	}

	// Setup Query Params
	localVarQueryParams = neturl.Values{}
	localVarQueryParams.Add("sub_mchid", core.ParameterToString(*req.SubMchid, ""))

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract Refund from Http Response
	resp = new(Refund)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}

// QueryReturnAdvance 查询垫付回补结果
//
// 提交垫付退款回补后，通过调用该接口查询垫付回补结果。
//
//
// 1. 垫付回补结果为处理中，微信支付会在90天内定期重试，重试结果需要查单确认。此状态下商户可以重试。
// 2. 若处理中状态重试90天后出款方账户仍然余额不足，回补结果将置为回补失败，系统不再重试，商户也无法重试，后续不能再发起此退款单的回补。回补处理期间请确保出款账户余额足够。
// 3. 垫付退款能力需先开通，才能使用。若需要开通，请联系微信支付客服。
func (a *RefundsApiService) QueryReturnAdvance(ctx context.Context, req QueryReturnAdvanceRequest) (resp *ReturnAdvance, result *core.APIResult, err error) {
	var (
		localVarHTTPMethod   = nethttp.MethodGet
		localVarPostBody     interface{}
		localVarQueryParams  neturl.Values
		localVarHeaderParams = nethttp.Header{}
	)

	// Make sure Path Params are properly set
	if req.RefundId == nil {
		return nil, nil, fmt.Errorf("field `RefundId` is required and must be specified in QueryReturnAdvanceRequest")
	}

	localVarPath := consts.WechatPayAPIServer + "/v3/ecommerce/refunds/{refund_id}/return-advance"
	// Build Path with Path Params
	localVarPath = strings.Replace(localVarPath, "{"+"refund_id"+"}", neturl.PathEscape(core.ParameterToString(*req.RefundId, "")), -1)

	// Make sure All Required Params are properly set
	if req.SubMchid == nil {
		return nil, nil, fmt.Errorf("field `SubMchid` is required and must be specified in QueryReturnAdvanceRequest")
	}

	// Setup Query Params
	localVarQueryParams = neturl.Values{}
	localVarQueryParams.Add("sub_mchid", core.ParameterToString(*req.SubMchid, ""))

	// Determine the Content-Type Header
	localVarHTTPContentTypes := []string{}
	// Setup Content-Type
	localVarHTTPContentType := core.SelectHeaderContentType(localVarHTTPContentTypes)

	// Perform Http Request
	result, err = a.Client.Request(ctx, localVarHTTPMethod, localVarPath, localVarHeaderParams, localVarQueryParams, localVarPostBody, localVarHTTPContentType)
	if err != nil {
		return nil, result, err
	}

	// Extract ReturnAdvance from Http Response
	resp = new(ReturnAdvance)
	err = core.UnMarshalResponse(result.Response, resp)
	if err != nil {
		return nil, result, err
	}
	return resp, result, nil
}
