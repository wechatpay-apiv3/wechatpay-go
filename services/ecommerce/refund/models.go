// Copyright 2021 Tencent Inc. All rights reserved.
//
// 电商退款API
//
// 境内电商退款功能相关API文档
//
// API version: 1.1.8

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package refund

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateAbnormalRefundRequest
type CreateAbnormalRefundRequest struct {
	// 微信支付分配二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
	// 商户系统内部的退款单号，商户系统内部唯一，只能是数字、大小写字母_-|*@ ，同一退款单号多次请求只退一笔。
	OutRefundNo *string `json:"out_refund_no"`
	// 可选：退款至用户、退款至交易商户银行账户
	Type *Type `json:"type"`
	// 银行类型，采用字符串类型的银行标识，值列表详见[银行类型](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_2)。仅支持招行、交通银行、农行、建行、工商、中行、平安、浦发、中信、光大、民生、兴业、广发、邮储、宁波银行的借记卡。 若退款至用户此字段必填。
	BankType *string `json:"bank_type,omitempty"`
	// 用户的银行卡账号，该字段需进行加密处理，加密方法详见[敏感信息加密说明](https://wechatpay-api.gitbook.io/wechatpay-api-v3/qian-ming-zhi-nan-1/min-gan-xin-xi-jia-mi)。 若退款至用户此字段必填。
	BankAccount *string `json:"bank_account,omitempty" encryption:"EM_APIV3"`
	// 收款用户姓名，该字段需进行加密处理，加密方法详见[敏感信息加密说明](https://wechatpay-api.gitbook.io/wechatpay-api-v3/qian-ming-zhi-nan-1/min-gan-xin-xi-jia-mi)。 若退款至用户此字段必填。
	RealName *string `json:"real_name,omitempty" encryption:"EM_APIV3"`
}

func (o CreateAbnormalRefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in CreateAbnormalRefundRequest")
	}
	toSerialize["sub_mchid"] = o.SubMchid

	if o.OutRefundNo == nil {
		return nil, fmt.Errorf("field `OutRefundNo` is required and must be specified in CreateAbnormalRefundRequest")
	}
	toSerialize["out_refund_no"] = o.OutRefundNo

	if o.Type == nil {
		return nil, fmt.Errorf("field `Type` is required and must be specified in CreateAbnormalRefundRequest")
	}
	toSerialize["type"] = o.Type

	if o.BankType != nil {
		toSerialize["bank_type"] = o.BankType
	}

	if o.BankAccount != nil {
		toSerialize["bank_account"] = o.BankAccount
	}

	if o.RealName != nil {
		toSerialize["real_name"] = o.RealName
	}
	return json.Marshal(toSerialize)
}

func (o CreateAbnormalRefundRequest) String() string {
	var ret string
	if o.SubMchid == nil {
		ret += "SubMchid:<nil>, "
	} else {
		ret += fmt.Sprintf("SubMchid:%v, ", *o.SubMchid)
	}

	if o.OutRefundNo == nil {
		ret += "OutRefundNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutRefundNo:%v, ", *o.OutRefundNo)
	}

	if o.Type == nil {
		ret += "Type:<nil>, "
	} else {
		ret += fmt.Sprintf("Type:%v, ", *o.Type)
	}

	if o.BankType == nil {
		ret += "BankType:<nil>, "
	} else {
		ret += fmt.Sprintf("BankType:%v, ", *o.BankType)
	}

	if o.BankAccount == nil {
		ret += "BankAccount:<nil>, "
	} else {
		ret += fmt.Sprintf("BankAccount:%v, ", *o.BankAccount)
	}

	if o.RealName == nil {
		ret += "RealName:<nil>"
	} else {
		ret += fmt.Sprintf("RealName:%v", *o.RealName)
	}

	return fmt.Sprintf("CreateAbnormalRefundRequest{%s}", ret)
}

func (o CreateAbnormalRefundRequest) Clone() *CreateAbnormalRefundRequest {
	ret := CreateAbnormalRefundRequest{}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	if o.OutRefundNo != nil {
		ret.OutRefundNo = new(string)
		*ret.OutRefundNo = *o.OutRefundNo
	}

	if o.Type != nil {
		ret.Type = new(Type)
		*ret.Type = *o.Type
	}

	if o.BankType != nil {
		ret.BankType = new(string)
		*ret.BankType = *o.BankType
	}

	if o.BankAccount != nil {
		ret.BankAccount = new(string)
		*ret.BankAccount = *o.BankAccount
	}

	if o.RealName != nil {
		ret.RealName = new(string)
		*ret.RealName = *o.RealName
	}

	return &ret
}

// CreateRefundRequest
type CreateRefundRequest struct {
	// 微信支付分配二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
	// 电商平台在微信公众平台申请服务号对应的APPID，申请商户功能的时候微信支付会配置绑定关系
	SpAppid *string `json:"sp_appid"`
	// 二级商户在微信申请公众号成功后分配的帐号ID，需要电商平台侧有配置绑定关系才能传
	SubAppid *string `json:"sub_appid,omitempty"`
	// 原支付交易对应的微信订单号
	TransactionId *string `json:"transaction_id,omitempty"`
	// 原支付交易对应的商户订单号
	OutTradeNo *string `json:"out_trade_no,omitempty"`
	// 商户系统内部的退款单号，商户系统内部唯一，只能是数字、大小写字母_-|*@ ，同一退款单号多次请求只退一笔。
	OutRefundNo *string `json:"out_refund_no"`
	// 若商户传入，会在下发给用户的退款消息中体现退款原因
	Reason *string `json:"reason,omitempty"`
	// 订单金额信息
	Amount *RefundReqAmount `json:"amount"`
	// 异步接收微信支付退款结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。 如果参数中传了notify_url，则商户平台上配置的回调地址将不会生效，优先回调当前传的这个地址。
	NotifyUrl *string `json:"notify_url,omitempty"`
	// REFUND_SOURCE_PARTNER_ADVANCE : 电商平台垫付，需要向微信支付申请开通 REFUND_SOURCE_SUB_MERCHANT : 二级商户，默认值 注意：若传入REFUND_SOURCE_PARTNER_ADVANCE，仅代表可以使用垫付退款，实际出款账户需以退款申请受理结果或查单结果为准。
	RefundAccount *string `json:"refund_account,omitempty"`
	// 若订单处于待分账状态，可以传入此参数，指定退款资金来源账户。当该字段不存在时，默认使用订单交易资金所在账户出款，即待分账时使用不可用余额的资金进行退款，已分账或无分账时使用可用余额的资金进行退款。 AVAILABLE：可用余额
	FundsAccount *string `json:"funds_account,omitempty"`
}

func (o CreateRefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in CreateRefundRequest")
	}
	toSerialize["sub_mchid"] = o.SubMchid

	if o.SpAppid == nil {
		return nil, fmt.Errorf("field `SpAppid` is required and must be specified in CreateRefundRequest")
	}
	toSerialize["sp_appid"] = o.SpAppid

	if o.SubAppid != nil {
		toSerialize["sub_appid"] = o.SubAppid
	}

	if o.TransactionId != nil {
		toSerialize["transaction_id"] = o.TransactionId
	}

	if o.OutTradeNo != nil {
		toSerialize["out_trade_no"] = o.OutTradeNo
	}

	if o.OutRefundNo == nil {
		return nil, fmt.Errorf("field `OutRefundNo` is required and must be specified in CreateRefundRequest")
	}
	toSerialize["out_refund_no"] = o.OutRefundNo

	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}

	if o.Amount == nil {
		return nil, fmt.Errorf("field `Amount` is required and must be specified in CreateRefundRequest")
	}
	toSerialize["amount"] = o.Amount

	if o.NotifyUrl != nil {
		toSerialize["notify_url"] = o.NotifyUrl
	}

	if o.RefundAccount != nil {
		toSerialize["refund_account"] = o.RefundAccount
	}

	if o.FundsAccount != nil {
		toSerialize["funds_account"] = o.FundsAccount
	}
	return json.Marshal(toSerialize)
}

func (o CreateRefundRequest) String() string {
	var ret string
	if o.SubMchid == nil {
		ret += "SubMchid:<nil>, "
	} else {
		ret += fmt.Sprintf("SubMchid:%v, ", *o.SubMchid)
	}

	if o.SpAppid == nil {
		ret += "SpAppid:<nil>, "
	} else {
		ret += fmt.Sprintf("SpAppid:%v, ", *o.SpAppid)
	}

	if o.SubAppid == nil {
		ret += "SubAppid:<nil>, "
	} else {
		ret += fmt.Sprintf("SubAppid:%v, ", *o.SubAppid)
	}

	if o.TransactionId == nil {
		ret += "TransactionId:<nil>, "
	} else {
		ret += fmt.Sprintf("TransactionId:%v, ", *o.TransactionId)
	}

	if o.OutTradeNo == nil {
		ret += "OutTradeNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutTradeNo:%v, ", *o.OutTradeNo)
	}

	if o.OutRefundNo == nil {
		ret += "OutRefundNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutRefundNo:%v, ", *o.OutRefundNo)
	}

	if o.Reason == nil {
		ret += "Reason:<nil>, "
	} else {
		ret += fmt.Sprintf("Reason:%v, ", *o.Reason)
	}

	ret += fmt.Sprintf("Amount:%v, ", o.Amount)

	if o.NotifyUrl == nil {
		ret += "NotifyUrl:<nil>, "
	} else {
		ret += fmt.Sprintf("NotifyUrl:%v, ", *o.NotifyUrl)
	}

	if o.RefundAccount == nil {
		ret += "RefundAccount:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundAccount:%v, ", *o.RefundAccount)
	}

	if o.FundsAccount == nil {
		ret += "FundsAccount:<nil>"
	} else {
		ret += fmt.Sprintf("FundsAccount:%v", *o.FundsAccount)
	}

	return fmt.Sprintf("CreateRefundRequest{%s}", ret)
}

func (o CreateRefundRequest) Clone() *CreateRefundRequest {
	ret := CreateRefundRequest{}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	if o.SpAppid != nil {
		ret.SpAppid = new(string)
		*ret.SpAppid = *o.SpAppid
	}

	if o.SubAppid != nil {
		ret.SubAppid = new(string)
		*ret.SubAppid = *o.SubAppid
	}

	if o.TransactionId != nil {
		ret.TransactionId = new(string)
		*ret.TransactionId = *o.TransactionId
	}

	if o.OutTradeNo != nil {
		ret.OutTradeNo = new(string)
		*ret.OutTradeNo = *o.OutTradeNo
	}

	if o.OutRefundNo != nil {
		ret.OutRefundNo = new(string)
		*ret.OutRefundNo = *o.OutRefundNo
	}

	if o.Reason != nil {
		ret.Reason = new(string)
		*ret.Reason = *o.Reason
	}

	if o.Amount != nil {
		ret.Amount = o.Amount.Clone()
	}

	if o.NotifyUrl != nil {
		ret.NotifyUrl = new(string)
		*ret.NotifyUrl = *o.NotifyUrl
	}

	if o.RefundAccount != nil {
		ret.RefundAccount = new(string)
		*ret.RefundAccount = *o.RefundAccount
	}

	if o.FundsAccount != nil {
		ret.FundsAccount = new(string)
		*ret.FundsAccount = *o.FundsAccount
	}

	return &ret
}

// CreateReturnAdvanceBody
type CreateReturnAdvanceBody struct {
	// 微信支付分配给二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
}

func (o CreateReturnAdvanceBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in CreateReturnAdvanceBody")
	}
	toSerialize["sub_mchid"] = o.SubMchid
	return json.Marshal(toSerialize)
}

func (o CreateReturnAdvanceBody) String() string {
	var ret string
	if o.SubMchid == nil {
		ret += "SubMchid:<nil>"
	} else {
		ret += fmt.Sprintf("SubMchid:%v", *o.SubMchid)
	}

	return fmt.Sprintf("CreateReturnAdvanceBody{%s}", ret)
}

func (o CreateReturnAdvanceBody) Clone() *CreateReturnAdvanceBody {
	ret := CreateReturnAdvanceBody{}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	return &ret
}

// CreateReturnAdvanceRequest
type CreateReturnAdvanceRequest struct {
	// 必须是垫付退款的微信退款单
	RefundId *string `json:"refund_id"`
	// 微信支付分配给二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
}

func (o CreateReturnAdvanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.RefundId == nil {
		return nil, fmt.Errorf("field `RefundId` is required and must be specified in CreateReturnAdvanceRequest")
	}
	toSerialize["refund_id"] = o.RefundId

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in CreateReturnAdvanceRequest")
	}
	toSerialize["sub_mchid"] = o.SubMchid
	return json.Marshal(toSerialize)
}

func (o CreateReturnAdvanceRequest) String() string {
	var ret string
	if o.RefundId == nil {
		ret += "RefundId:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundId:%v, ", *o.RefundId)
	}

	if o.SubMchid == nil {
		ret += "SubMchid:<nil>"
	} else {
		ret += fmt.Sprintf("SubMchid:%v", *o.SubMchid)
	}

	return fmt.Sprintf("CreateReturnAdvanceRequest{%s}", ret)
}

func (o CreateReturnAdvanceRequest) Clone() *CreateReturnAdvanceRequest {
	ret := CreateReturnAdvanceRequest{}

	if o.RefundId != nil {
		ret.RefundId = new(string)
		*ret.RefundId = *o.RefundId
	}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	return &ret
}

// FundsFromItem
type FundsFromItem struct {
	// 下面枚举值多选一。 枚举值： AVAILABLE : 可用余额 UNAVAILABLE : 不可用余额
	Account *string `json:"account"`
	// 对应账户出资金额
	Amount *int64 `json:"amount"`
}

func (o FundsFromItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Account == nil {
		return nil, fmt.Errorf("field `Account` is required and must be specified in FundsFromItem")
	}
	toSerialize["account"] = o.Account

	if o.Amount == nil {
		return nil, fmt.Errorf("field `Amount` is required and must be specified in FundsFromItem")
	}
	toSerialize["amount"] = o.Amount
	return json.Marshal(toSerialize)
}

func (o FundsFromItem) String() string {
	var ret string
	if o.Account == nil {
		ret += "Account:<nil>, "
	} else {
		ret += fmt.Sprintf("Account:%v, ", *o.Account)
	}

	if o.Amount == nil {
		ret += "Amount:<nil>"
	} else {
		ret += fmt.Sprintf("Amount:%v", *o.Amount)
	}

	return fmt.Sprintf("FundsFromItem{%s}", ret)
}

func (o FundsFromItem) Clone() *FundsFromItem {
	ret := FundsFromItem{}

	if o.Account != nil {
		ret.Account = new(string)
		*ret.Account = *o.Account
	}

	if o.Amount != nil {
		ret.Amount = new(int64)
		*ret.Amount = *o.Amount
	}

	return &ret
}

// PromotionDetail
type PromotionDetail struct {
	// 券或者立减优惠id
	PromotionId *string `json:"promotion_id"`
	// GLOBAL- 全场代金券 SINGLE- 单品优惠
	Scope *string `json:"scope"`
	// COUPON- 代金券，需要走结算资金的充值型代金券 DISCOUNT- 优惠券，不走结算资金的免充值型优惠券
	Type *string `json:"type"`
	// 用户享受优惠的金额（优惠券面额=微信出资金额+商家出资金额+其他出资方金额 ）
	Amount *int64 `json:"amount"`
	// 代金券退款金额<=退款金额，退款金额-代金券或立减优惠退款金额为现金，说明详见代金券或立减优惠
	RefundAmount *int64 `json:"refund_amount"`
}

func (o PromotionDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.PromotionId == nil {
		return nil, fmt.Errorf("field `PromotionId` is required and must be specified in PromotionDetail")
	}
	toSerialize["promotion_id"] = o.PromotionId

	if o.Scope == nil {
		return nil, fmt.Errorf("field `Scope` is required and must be specified in PromotionDetail")
	}
	toSerialize["scope"] = o.Scope

	if o.Type == nil {
		return nil, fmt.Errorf("field `Type` is required and must be specified in PromotionDetail")
	}
	toSerialize["type"] = o.Type

	if o.Amount == nil {
		return nil, fmt.Errorf("field `Amount` is required and must be specified in PromotionDetail")
	}
	toSerialize["amount"] = o.Amount

	if o.RefundAmount == nil {
		return nil, fmt.Errorf("field `RefundAmount` is required and must be specified in PromotionDetail")
	}
	toSerialize["refund_amount"] = o.RefundAmount
	return json.Marshal(toSerialize)
}

func (o PromotionDetail) String() string {
	var ret string
	if o.PromotionId == nil {
		ret += "PromotionId:<nil>, "
	} else {
		ret += fmt.Sprintf("PromotionId:%v, ", *o.PromotionId)
	}

	if o.Scope == nil {
		ret += "Scope:<nil>, "
	} else {
		ret += fmt.Sprintf("Scope:%v, ", *o.Scope)
	}

	if o.Type == nil {
		ret += "Type:<nil>, "
	} else {
		ret += fmt.Sprintf("Type:%v, ", *o.Type)
	}

	if o.Amount == nil {
		ret += "Amount:<nil>, "
	} else {
		ret += fmt.Sprintf("Amount:%v, ", *o.Amount)
	}

	if o.RefundAmount == nil {
		ret += "RefundAmount:<nil>"
	} else {
		ret += fmt.Sprintf("RefundAmount:%v", *o.RefundAmount)
	}

	return fmt.Sprintf("PromotionDetail{%s}", ret)
}

func (o PromotionDetail) Clone() *PromotionDetail {
	ret := PromotionDetail{}

	if o.PromotionId != nil {
		ret.PromotionId = new(string)
		*ret.PromotionId = *o.PromotionId
	}

	if o.Scope != nil {
		ret.Scope = new(string)
		*ret.Scope = *o.Scope
	}

	if o.Type != nil {
		ret.Type = new(string)
		*ret.Type = *o.Type
	}

	if o.Amount != nil {
		ret.Amount = new(int64)
		*ret.Amount = *o.Amount
	}

	if o.RefundAmount != nil {
		ret.RefundAmount = new(int64)
		*ret.RefundAmount = *o.RefundAmount
	}

	return &ret
}

// QueryRefundByOutRefundNoRequest
type QueryRefundByOutRefundNoRequest struct {
	// 商户系统内部的退款单号，商户系统内部唯一，只能是数字、大小写字母_-|*@ ，同一退款单号多次请求只退一笔。
	OutRefundNo *string `json:"out_refund_no"`
	// 微信支付分配给二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
}

func (o QueryRefundByOutRefundNoRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutRefundNo == nil {
		return nil, fmt.Errorf("field `OutRefundNo` is required and must be specified in QueryRefundByOutRefundNoRequest")
	}
	toSerialize["out_refund_no"] = o.OutRefundNo

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in QueryRefundByOutRefundNoRequest")
	}
	toSerialize["sub_mchid"] = o.SubMchid
	return json.Marshal(toSerialize)
}

func (o QueryRefundByOutRefundNoRequest) String() string {
	var ret string
	if o.OutRefundNo == nil {
		ret += "OutRefundNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutRefundNo:%v, ", *o.OutRefundNo)
	}

	if o.SubMchid == nil {
		ret += "SubMchid:<nil>"
	} else {
		ret += fmt.Sprintf("SubMchid:%v", *o.SubMchid)
	}

	return fmt.Sprintf("QueryRefundByOutRefundNoRequest{%s}", ret)
}

func (o QueryRefundByOutRefundNoRequest) Clone() *QueryRefundByOutRefundNoRequest {
	ret := QueryRefundByOutRefundNoRequest{}

	if o.OutRefundNo != nil {
		ret.OutRefundNo = new(string)
		*ret.OutRefundNo = *o.OutRefundNo
	}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	return &ret
}

// QueryRefundRequest
type QueryRefundRequest struct {
	// 退款单的主键，唯一定义此资源的标识
	RefundId *string `json:"refund_id"`
	// 微信支付分配给二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
}

func (o QueryRefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.RefundId == nil {
		return nil, fmt.Errorf("field `RefundId` is required and must be specified in QueryRefundRequest")
	}
	toSerialize["refund_id"] = o.RefundId

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in QueryRefundRequest")
	}
	toSerialize["sub_mchid"] = o.SubMchid
	return json.Marshal(toSerialize)
}

func (o QueryRefundRequest) String() string {
	var ret string
	if o.RefundId == nil {
		ret += "RefundId:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundId:%v, ", *o.RefundId)
	}

	if o.SubMchid == nil {
		ret += "SubMchid:<nil>"
	} else {
		ret += fmt.Sprintf("SubMchid:%v", *o.SubMchid)
	}

	return fmt.Sprintf("QueryRefundRequest{%s}", ret)
}

func (o QueryRefundRequest) Clone() *QueryRefundRequest {
	ret := QueryRefundRequest{}

	if o.RefundId != nil {
		ret.RefundId = new(string)
		*ret.RefundId = *o.RefundId
	}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	return &ret
}

// QueryReturnAdvanceRequest
type QueryReturnAdvanceRequest struct {
	// 必须是垫付退款的微信退款单
	RefundId *string `json:"refund_id"`
	// 微信支付分配给二级商户的商户号
	SubMchid *string `json:"sub_mchid"`
}

func (o QueryReturnAdvanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.RefundId == nil {
		return nil, fmt.Errorf("field `RefundId` is required and must be specified in QueryReturnAdvanceRequest")
	}
	toSerialize["refund_id"] = o.RefundId

	if o.SubMchid == nil {
		return nil, fmt.Errorf("field `SubMchid` is required and must be specified in QueryReturnAdvanceRequest")
	}
	toSerialize["sub_mchid"] = o.SubMchid
	return json.Marshal(toSerialize)
}

func (o QueryReturnAdvanceRequest) String() string {
	var ret string
	if o.RefundId == nil {
		ret += "RefundId:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundId:%v, ", *o.RefundId)
	}

	if o.SubMchid == nil {
		ret += "SubMchid:<nil>"
	} else {
		ret += fmt.Sprintf("SubMchid:%v", *o.SubMchid)
	}

	return fmt.Sprintf("QueryReturnAdvanceRequest{%s}", ret)
}

func (o QueryReturnAdvanceRequest) Clone() *QueryReturnAdvanceRequest {
	ret := QueryReturnAdvanceRequest{}

	if o.RefundId != nil {
		ret.RefundId = new(string)
		*ret.RefundId = *o.RefundId
	}

	if o.SubMchid != nil {
		ret.SubMchid = new(string)
		*ret.SubMchid = *o.SubMchid
	}

	return &ret
}

// Refund
type Refund struct {
	// 微信支付退款订单订单号
	RefundId *string `json:"refund_id"`
	// 商户系统内部的退款单号，商户系统内部唯一，只能是数字、大小写字母_-|*@ ，同一退款单号多次请求只退一笔。
	OutRefundNo *string `json:"out_refund_no"`
	// 微信支付交易订单号
	TransactionId *string `json:"transaction_id"`
	// 返回的原交易订单号
	OutTradeNo *string `json:"out_trade_no"`
	// ORIGINAL—原路退款 BALANCE—退回到余额 OTHER_BALANCE—原账户异常退到其他余额账户 OTHER_BANKCARD—原银行卡异常退到其他银行卡
	Channel *string `json:"channel,omitempty"`
	// 取当前退款单的退款入账方 1）退回银行卡： {银行名称}{卡类型}{卡尾号} 2）退回支付用户零钱: 支付用户零钱 3）退还商户: 商户基本账户 商户结算银行账户 4）退回支付用户零钱通: 支付用户零钱通
	UserReceivedAccount *string `json:"user_received_account,omitempty"`
	// 退款成功时间，退款状态status为SUCCESS（退款成功）时，返回该字段。遵循rfc3339标准格式，格式为YYYY-MM-DDTHH:mm:ss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss表示时分秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35+08:00表示，北京时间2015年5月20日13点29分35秒。
	SuccessTime *time.Time `json:"success_time,omitempty"`
	// 退款受理时间，遵循rfc3339标准格式，格式为YYYY-MM-DDTHH:mm:ss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss表示时分秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35+08:00表示，北京时间2015年5月20日13点29分35秒。
	CreateTime *string `json:"create_time"`
	// 退款状态： SUCCESS—退款成功 CLOSED—退款关闭。 PROCESSING—退款处理中 ABNORMAL—退款异常，退款到银行发现用户的卡作废或者冻结了，导致原路退款银行卡失败，可前往商户平台（pay.weixin.qq.com）-交易中心，手动处理此笔退款。
	Status *string `json:"status"`
	// 退款金额信息
	Amount *RefundAmount `json:"amount"`
	// 优惠退款信息
	PromotionDetail []PromotionDetail `json:"promotion_detail,omitempty"`
	// REFUND_SOURCE_PARTNER_ADVANCE : 电商平台垫付 REFUND_SOURCE_SUB_MERCHANT : 二级商户，默认值 注意：申请退款时可能会出现暂未扣除退款资金的情况，此时不返回本字段，需继续查单确认。
	RefundAccount *string `json:"refund_account,omitempty"`
	// UNSETTLED : 未结算资金 AVAILABLE : 可用余额 UNAVAILABLE : 不可用余额 OPERATION : 运营户 BASIC : 基本账户（含可用余额和不可用余额） ECNY_BASIC : 数字人民币基本账户
	FundsAccount *string `json:"funds_account,omitempty"`
}

func (o Refund) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.RefundId == nil {
		return nil, fmt.Errorf("field `RefundId` is required and must be specified in Refund")
	}
	toSerialize["refund_id"] = o.RefundId

	if o.OutRefundNo == nil {
		return nil, fmt.Errorf("field `OutRefundNo` is required and must be specified in Refund")
	}
	toSerialize["out_refund_no"] = o.OutRefundNo

	if o.TransactionId == nil {
		return nil, fmt.Errorf("field `TransactionId` is required and must be specified in Refund")
	}
	toSerialize["transaction_id"] = o.TransactionId

	if o.OutTradeNo == nil {
		return nil, fmt.Errorf("field `OutTradeNo` is required and must be specified in Refund")
	}
	toSerialize["out_trade_no"] = o.OutTradeNo

	if o.Channel != nil {
		toSerialize["channel"] = o.Channel
	}

	if o.UserReceivedAccount != nil {
		toSerialize["user_received_account"] = o.UserReceivedAccount
	}

	if o.SuccessTime != nil {
		toSerialize["success_time"] = o.SuccessTime.Format(time.RFC3339)
	}

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in Refund")
	}
	toSerialize["create_time"] = o.CreateTime

	if o.Status == nil {
		return nil, fmt.Errorf("field `Status` is required and must be specified in Refund")
	}
	toSerialize["status"] = o.Status

	if o.Amount == nil {
		return nil, fmt.Errorf("field `Amount` is required and must be specified in Refund")
	}
	toSerialize["amount"] = o.Amount

	if o.PromotionDetail != nil {
		toSerialize["promotion_detail"] = o.PromotionDetail
	}

	if o.RefundAccount != nil {
		toSerialize["refund_account"] = o.RefundAccount
	}

	if o.FundsAccount != nil {
		toSerialize["funds_account"] = o.FundsAccount
	}
	return json.Marshal(toSerialize)
}

func (o Refund) String() string {
	var ret string
	if o.RefundId == nil {
		ret += "RefundId:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundId:%v, ", *o.RefundId)
	}

	if o.OutRefundNo == nil {
		ret += "OutRefundNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutRefundNo:%v, ", *o.OutRefundNo)
	}

	if o.TransactionId == nil {
		ret += "TransactionId:<nil>, "
	} else {
		ret += fmt.Sprintf("TransactionId:%v, ", *o.TransactionId)
	}

	if o.OutTradeNo == nil {
		ret += "OutTradeNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutTradeNo:%v, ", *o.OutTradeNo)
	}

	if o.Channel == nil {
		ret += "Channel:<nil>, "
	} else {
		ret += fmt.Sprintf("Channel:%v, ", *o.Channel)
	}

	if o.UserReceivedAccount == nil {
		ret += "UserReceivedAccount:<nil>, "
	} else {
		ret += fmt.Sprintf("UserReceivedAccount:%v, ", *o.UserReceivedAccount)
	}

	if o.SuccessTime == nil {
		ret += "SuccessTime:<nil>, "
	} else {
		ret += fmt.Sprintf("SuccessTime:%v, ", *o.SuccessTime)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	if o.Status == nil {
		ret += "Status:<nil>, "
	} else {
		ret += fmt.Sprintf("Status:%v, ", *o.Status)
	}

	ret += fmt.Sprintf("Amount:%v, ", o.Amount)

	ret += fmt.Sprintf("PromotionDetail:%v, ", o.PromotionDetail)

	if o.RefundAccount == nil {
		ret += "RefundAccount:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundAccount:%v, ", *o.RefundAccount)
	}

	if o.FundsAccount == nil {
		ret += "FundsAccount:<nil>"
	} else {
		ret += fmt.Sprintf("FundsAccount:%v", *o.FundsAccount)
	}

	return fmt.Sprintf("Refund{%s}", ret)
}

func (o Refund) Clone() *Refund {
	ret := Refund{}

	if o.RefundId != nil {
		ret.RefundId = new(string)
		*ret.RefundId = *o.RefundId
	}

	if o.OutRefundNo != nil {
		ret.OutRefundNo = new(string)
		*ret.OutRefundNo = *o.OutRefundNo
	}

	if o.TransactionId != nil {
		ret.TransactionId = new(string)
		*ret.TransactionId = *o.TransactionId
	}

	if o.OutTradeNo != nil {
		ret.OutTradeNo = new(string)
		*ret.OutTradeNo = *o.OutTradeNo
	}

	if o.Channel != nil {
		ret.Channel = new(string)
		*ret.Channel = *o.Channel
	}

	if o.UserReceivedAccount != nil {
		ret.UserReceivedAccount = new(string)
		*ret.UserReceivedAccount = *o.UserReceivedAccount
	}

	if o.SuccessTime != nil {
		ret.SuccessTime = new(time.Time)
		*ret.SuccessTime = *o.SuccessTime
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(string)
		*ret.CreateTime = *o.CreateTime
	}

	if o.Status != nil {
		ret.Status = new(string)
		*ret.Status = *o.Status
	}

	if o.Amount != nil {
		ret.Amount = o.Amount.Clone()
	}

	if o.PromotionDetail != nil {
		ret.PromotionDetail = make([]PromotionDetail, len(o.PromotionDetail))
		for i, item := range o.PromotionDetail {
			ret.PromotionDetail[i] = *item.Clone()
		}
	}

	if o.RefundAccount != nil {
		ret.RefundAccount = new(string)
		*ret.RefundAccount = *o.RefundAccount
	}

	if o.FundsAccount != nil {
		ret.FundsAccount = new(string)
		*ret.FundsAccount = *o.FundsAccount
	}

	return &ret
}

// Refund4Create
type Refund4Create struct {
	// 微信支付退款订单号
	RefundId *string `json:"refund_id"`
	// 商户系统内部的退款单号，商户系统内部唯一，只能是数字、大小写字母_-|*@ ，同一退款单号多次请求只退一笔。
	OutRefundNo *string `json:"out_refund_no"`
	// 退款受理时间，遵循rfc3339标准格式，格式为YYYY-MM-DDTHH:mm:ss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss表示时分秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35+08:00表示，北京时间2015年5月20日13点29分35秒。
	CreateTime *time.Time `json:"create_time"`
	// 订单退款金额信息
	Amount *RefundAmount `json:"amount"`
	// 优惠退款功能信息
	PromotionDetail []PromotionDetail `json:"promotion_detail,omitempty"`
	// REFUND_SOURCE_PARTNER_ADVANCE : 电商平台垫付 REFUND_SOURCE_SUB_MERCHANT : 二级商户，默认值 注意：申请退款时可能会出现暂未扣除退款资金的情况，此时不返回本字段，需查单确认。
	RefundAccount *string `json:"refund_account,omitempty"`
}

func (o Refund4Create) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.RefundId == nil {
		return nil, fmt.Errorf("field `RefundId` is required and must be specified in Refund4Create")
	}
	toSerialize["refund_id"] = o.RefundId

	if o.OutRefundNo == nil {
		return nil, fmt.Errorf("field `OutRefundNo` is required and must be specified in Refund4Create")
	}
	toSerialize["out_refund_no"] = o.OutRefundNo

	if o.CreateTime == nil {
		return nil, fmt.Errorf("field `CreateTime` is required and must be specified in Refund4Create")
	}
	toSerialize["create_time"] = o.CreateTime.Format(time.RFC3339)

	if o.Amount == nil {
		return nil, fmt.Errorf("field `Amount` is required and must be specified in Refund4Create")
	}
	toSerialize["amount"] = o.Amount

	if o.PromotionDetail != nil {
		toSerialize["promotion_detail"] = o.PromotionDetail
	}

	if o.RefundAccount != nil {
		toSerialize["refund_account"] = o.RefundAccount
	}
	return json.Marshal(toSerialize)
}

func (o Refund4Create) String() string {
	var ret string
	if o.RefundId == nil {
		ret += "RefundId:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundId:%v, ", *o.RefundId)
	}

	if o.OutRefundNo == nil {
		ret += "OutRefundNo:<nil>, "
	} else {
		ret += fmt.Sprintf("OutRefundNo:%v, ", *o.OutRefundNo)
	}

	if o.CreateTime == nil {
		ret += "CreateTime:<nil>, "
	} else {
		ret += fmt.Sprintf("CreateTime:%v, ", *o.CreateTime)
	}

	ret += fmt.Sprintf("Amount:%v, ", o.Amount)

	ret += fmt.Sprintf("PromotionDetail:%v, ", o.PromotionDetail)

	if o.RefundAccount == nil {
		ret += "RefundAccount:<nil>"
	} else {
		ret += fmt.Sprintf("RefundAccount:%v", *o.RefundAccount)
	}

	return fmt.Sprintf("Refund4Create{%s}", ret)
}

func (o Refund4Create) Clone() *Refund4Create {
	ret := Refund4Create{}

	if o.RefundId != nil {
		ret.RefundId = new(string)
		*ret.RefundId = *o.RefundId
	}

	if o.OutRefundNo != nil {
		ret.OutRefundNo = new(string)
		*ret.OutRefundNo = *o.OutRefundNo
	}

	if o.CreateTime != nil {
		ret.CreateTime = new(time.Time)
		*ret.CreateTime = *o.CreateTime
	}

	if o.Amount != nil {
		ret.Amount = o.Amount.Clone()
	}

	if o.PromotionDetail != nil {
		ret.PromotionDetail = make([]PromotionDetail, len(o.PromotionDetail))
		for i, item := range o.PromotionDetail {
			ret.PromotionDetail[i] = *item.Clone()
		}
	}

	if o.RefundAccount != nil {
		ret.RefundAccount = new(string)
		*ret.RefundAccount = *o.RefundAccount
	}

	return &ret
}

// RefundAmount
type RefundAmount struct {
	// 退款金额，单位为分，只能为整数，不能超 过原订单支付金额
	Refund *int64 `json:"refund"`
	// 退款出资的账户类型及金额信息
	From []FundsFromItem `json:"from,omitempty"`
	// 退款给用户的金额，不包含所有优惠券金额
	PayerRefund *int64 `json:"payer_refund"`
	// 优惠券的退款金额，原支付单的优惠按比例退款
	DiscountRefund *int64 `json:"discount_refund,omitempty"`
	// 符合ISO4217标准的三位字母代码，目前只支持人民币：CNY
	Currency *string `json:"currency,omitempty"`
	// 电商平台垫付的金额
	Advance *int64 `json:"advance,omitempty"`
}

func (o RefundAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Refund == nil {
		return nil, fmt.Errorf("field `Refund` is required and must be specified in RefundAmount")
	}
	toSerialize["refund"] = o.Refund

	if o.From != nil {
		toSerialize["from"] = o.From
	}

	if o.PayerRefund == nil {
		return nil, fmt.Errorf("field `PayerRefund` is required and must be specified in RefundAmount")
	}
	toSerialize["payer_refund"] = o.PayerRefund

	if o.DiscountRefund != nil {
		toSerialize["discount_refund"] = o.DiscountRefund
	}

	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}

	if o.Advance != nil {
		toSerialize["advance"] = o.Advance
	}
	return json.Marshal(toSerialize)
}

func (o RefundAmount) String() string {
	var ret string
	if o.Refund == nil {
		ret += "Refund:<nil>, "
	} else {
		ret += fmt.Sprintf("Refund:%v, ", *o.Refund)
	}

	ret += fmt.Sprintf("From:%v, ", o.From)

	if o.PayerRefund == nil {
		ret += "PayerRefund:<nil>, "
	} else {
		ret += fmt.Sprintf("PayerRefund:%v, ", *o.PayerRefund)
	}

	if o.DiscountRefund == nil {
		ret += "DiscountRefund:<nil>, "
	} else {
		ret += fmt.Sprintf("DiscountRefund:%v, ", *o.DiscountRefund)
	}

	if o.Currency == nil {
		ret += "Currency:<nil>, "
	} else {
		ret += fmt.Sprintf("Currency:%v, ", *o.Currency)
	}

	if o.Advance == nil {
		ret += "Advance:<nil>"
	} else {
		ret += fmt.Sprintf("Advance:%v", *o.Advance)
	}

	return fmt.Sprintf("RefundAmount{%s}", ret)
}

func (o RefundAmount) Clone() *RefundAmount {
	ret := RefundAmount{}

	if o.Refund != nil {
		ret.Refund = new(int64)
		*ret.Refund = *o.Refund
	}

	if o.From != nil {
		ret.From = make([]FundsFromItem, len(o.From))
		for i, item := range o.From {
			ret.From[i] = *item.Clone()
		}
	}

	if o.PayerRefund != nil {
		ret.PayerRefund = new(int64)
		*ret.PayerRefund = *o.PayerRefund
	}

	if o.DiscountRefund != nil {
		ret.DiscountRefund = new(int64)
		*ret.DiscountRefund = *o.DiscountRefund
	}

	if o.Currency != nil {
		ret.Currency = new(string)
		*ret.Currency = *o.Currency
	}

	if o.Advance != nil {
		ret.Advance = new(int64)
		*ret.Advance = *o.Advance
	}

	return &ret
}

// RefundReqAmount
type RefundReqAmount struct {
	// 退款金额，币种的最小单位，只能为整数，不能超过原订单支付金额。
	Refund *int64 `json:"refund"`
	// 退款需要从指定账户出资时，传递此参数指定出资金额（币种的最小单位，只能为整数）。 该功能优先级高于通过资金账户（funds_account）参数来指定可用余额出资退款功能，且二者不可同时使用。 同时指定多个账户出资退款的使用场景需要满足以下条件：1、未开通退款支出分离产品功能；2、非电商平台垫付退款；3、订单属于分账订单，且分账处于待分账或分账中状态。 参数传递需要满足条件：1、基本账户可用余额出资金额与基本账户不可用余额出资金额之和等于退款金额；2、账户类型不能重复。 上述任一条件不满足将返回错误
	From []FundsFromItem `json:"from,omitempty"`
	// 原支付交易的订单总金额，币种的最小单位，只能为整数
	Total *int64 `json:"total"`
	// 符合ISO 4217标准的三位字母代码，目前只支持人民币：CNY
	Currency *string `json:"currency,omitempty"`
}

func (o RefundReqAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Refund == nil {
		return nil, fmt.Errorf("field `Refund` is required and must be specified in RefundReqAmount")
	}
	toSerialize["refund"] = o.Refund

	if o.From != nil {
		toSerialize["from"] = o.From
	}

	if o.Total == nil {
		return nil, fmt.Errorf("field `Total` is required and must be specified in RefundReqAmount")
	}
	toSerialize["total"] = o.Total

	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

func (o RefundReqAmount) String() string {
	var ret string
	if o.Refund == nil {
		ret += "Refund:<nil>, "
	} else {
		ret += fmt.Sprintf("Refund:%v, ", *o.Refund)
	}

	ret += fmt.Sprintf("From:%v, ", o.From)

	if o.Total == nil {
		ret += "Total:<nil>, "
	} else {
		ret += fmt.Sprintf("Total:%v, ", *o.Total)
	}

	if o.Currency == nil {
		ret += "Currency:<nil>"
	} else {
		ret += fmt.Sprintf("Currency:%v", *o.Currency)
	}

	return fmt.Sprintf("RefundReqAmount{%s}", ret)
}

func (o RefundReqAmount) Clone() *RefundReqAmount {
	ret := RefundReqAmount{}

	if o.Refund != nil {
		ret.Refund = new(int64)
		*ret.Refund = *o.Refund
	}

	if o.From != nil {
		ret.From = make([]FundsFromItem, len(o.From))
		for i, item := range o.From {
			ret.From[i] = *item.Clone()
		}
	}

	if o.Total != nil {
		ret.Total = new(int64)
		*ret.Total = *o.Total
	}

	if o.Currency != nil {
		ret.Currency = new(string)
		*ret.Currency = *o.Currency
	}

	return &ret
}

// ReturnAdvance
type ReturnAdvance struct {
	// 必须是垫付退款的微信退款单
	RefundId *string `json:"refund_id"`
	// 微信支付生成的垫付回补操作单号
	AdvanceReturnId *string `json:"advance_return_id"`
	// 退款单对应的垫付退款的金额
	ReturnAmount *int64 `json:"return_amount"`
	// 微信支付分配给出款方的商户号
	PayerMchid *string `json:"payer_mchid"`
	// BASIC  基本账户 OPERATION 运营账户
	PayerAccount *string `json:"payer_account"`
	// 微信支付分配给入账方的商户号
	PayeeMchid *string `json:"payee_mchid"`
	// BASIC  基本账户 OPERATION 运营账户
	PayeeAccount *string `json:"payee_account"`
	// SUCCESS 回补成功 FAILED 回补失败，出款方账户余额不足时发生 PROCESSING 处理中
	Result *string `json:"result"`
	// 垫付回补完成的时间，遵循rfc3339标准格式，格式为YYYY-MM-DDTHH:mm:ss+TIMEZONE，YYYY-MM-DD表示年月日，T出现在字符串中，表示time元素的开头，HH:mm:ss表示时分秒，TIMEZONE表示时区（+08:00表示东八区时间，领先UTC 8小时，即北京时间）。例如：2015-05-20T13:29:35+08:00表示，北京时间2015年5月20日13点29分35秒。
	SuccessTime *time.Time `json:"success_time,omitempty"`
}

func (o ReturnAdvance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.RefundId == nil {
		return nil, fmt.Errorf("field `RefundId` is required and must be specified in ReturnAdvance")
	}
	toSerialize["refund_id"] = o.RefundId

	if o.AdvanceReturnId == nil {
		return nil, fmt.Errorf("field `AdvanceReturnId` is required and must be specified in ReturnAdvance")
	}
	toSerialize["advance_return_id"] = o.AdvanceReturnId

	if o.ReturnAmount == nil {
		return nil, fmt.Errorf("field `ReturnAmount` is required and must be specified in ReturnAdvance")
	}
	toSerialize["return_amount"] = o.ReturnAmount

	if o.PayerMchid == nil {
		return nil, fmt.Errorf("field `PayerMchid` is required and must be specified in ReturnAdvance")
	}
	toSerialize["payer_mchid"] = o.PayerMchid

	if o.PayerAccount == nil {
		return nil, fmt.Errorf("field `PayerAccount` is required and must be specified in ReturnAdvance")
	}
	toSerialize["payer_account"] = o.PayerAccount

	if o.PayeeMchid == nil {
		return nil, fmt.Errorf("field `PayeeMchid` is required and must be specified in ReturnAdvance")
	}
	toSerialize["payee_mchid"] = o.PayeeMchid

	if o.PayeeAccount == nil {
		return nil, fmt.Errorf("field `PayeeAccount` is required and must be specified in ReturnAdvance")
	}
	toSerialize["payee_account"] = o.PayeeAccount

	if o.Result == nil {
		return nil, fmt.Errorf("field `Result` is required and must be specified in ReturnAdvance")
	}
	toSerialize["result"] = o.Result

	if o.SuccessTime != nil {
		toSerialize["success_time"] = o.SuccessTime.Format(time.RFC3339)
	}
	return json.Marshal(toSerialize)
}

func (o ReturnAdvance) String() string {
	var ret string
	if o.RefundId == nil {
		ret += "RefundId:<nil>, "
	} else {
		ret += fmt.Sprintf("RefundId:%v, ", *o.RefundId)
	}

	if o.AdvanceReturnId == nil {
		ret += "AdvanceReturnId:<nil>, "
	} else {
		ret += fmt.Sprintf("AdvanceReturnId:%v, ", *o.AdvanceReturnId)
	}

	if o.ReturnAmount == nil {
		ret += "ReturnAmount:<nil>, "
	} else {
		ret += fmt.Sprintf("ReturnAmount:%v, ", *o.ReturnAmount)
	}

	if o.PayerMchid == nil {
		ret += "PayerMchid:<nil>, "
	} else {
		ret += fmt.Sprintf("PayerMchid:%v, ", *o.PayerMchid)
	}

	if o.PayerAccount == nil {
		ret += "PayerAccount:<nil>, "
	} else {
		ret += fmt.Sprintf("PayerAccount:%v, ", *o.PayerAccount)
	}

	if o.PayeeMchid == nil {
		ret += "PayeeMchid:<nil>, "
	} else {
		ret += fmt.Sprintf("PayeeMchid:%v, ", *o.PayeeMchid)
	}

	if o.PayeeAccount == nil {
		ret += "PayeeAccount:<nil>, "
	} else {
		ret += fmt.Sprintf("PayeeAccount:%v, ", *o.PayeeAccount)
	}

	if o.Result == nil {
		ret += "Result:<nil>, "
	} else {
		ret += fmt.Sprintf("Result:%v, ", *o.Result)
	}

	if o.SuccessTime == nil {
		ret += "SuccessTime:<nil>"
	} else {
		ret += fmt.Sprintf("SuccessTime:%v", *o.SuccessTime)
	}

	return fmt.Sprintf("ReturnAdvance{%s}", ret)
}

func (o ReturnAdvance) Clone() *ReturnAdvance {
	ret := ReturnAdvance{}

	if o.RefundId != nil {
		ret.RefundId = new(string)
		*ret.RefundId = *o.RefundId
	}

	if o.AdvanceReturnId != nil {
		ret.AdvanceReturnId = new(string)
		*ret.AdvanceReturnId = *o.AdvanceReturnId
	}

	if o.ReturnAmount != nil {
		ret.ReturnAmount = new(int64)
		*ret.ReturnAmount = *o.ReturnAmount
	}

	if o.PayerMchid != nil {
		ret.PayerMchid = new(string)
		*ret.PayerMchid = *o.PayerMchid
	}

	if o.PayerAccount != nil {
		ret.PayerAccount = new(string)
		*ret.PayerAccount = *o.PayerAccount
	}

	if o.PayeeMchid != nil {
		ret.PayeeMchid = new(string)
		*ret.PayeeMchid = *o.PayeeMchid
	}

	if o.PayeeAccount != nil {
		ret.PayeeAccount = new(string)
		*ret.PayeeAccount = *o.PayeeAccount
	}

	if o.Result != nil {
		ret.Result = new(string)
		*ret.Result = *o.Result
	}

	if o.SuccessTime != nil {
		ret.SuccessTime = new(time.Time)
		*ret.SuccessTime = *o.SuccessTime
	}

	return &ret
}

// Type
type Type string

func (e Type) Ptr() *Type {
	return &e
}

// Enums of Type
const (
	TYPE_USER_BANK_CARD     Type = "USER_BANK_CARD"
	TYPE_MERCHANT_BANK_CARD Type = "MERCHANT_BANK_CARD"
)
